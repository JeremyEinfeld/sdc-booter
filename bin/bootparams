#!/opt/smartdc/booter/node/bin/node

var assert = require('assert');
var bootparams = require('../lib/bootparams');
var bunyan = require('bunyan');
var fs = require('fs');
var uuid = require('node-uuid');


var configFile =  __dirname + '/../config.json';
var config = JSON.parse(fs.readFileSync(configFile, 'utf-8'));

var required = ['listenIp', 'tftpRoot', 'defaultGateway', 'serverIp',
  'leaseTime', 'netmask', 'port'];
for (var r in required) {
  var req = required[r];
  assert.ok(config.hasOwnProperty(req),
    "config: '" + req + "' value required");
}

var napi;
var cnapi;

var logger = bunyan.createLogger({
    name: 'bootparams',
    streams: [
      {
        path: '/var/log/bootparams.log',
        level: 'debug'
      }
		]
});
var log = logger.child({ mac: mac, req_id: uuid()});

try {
	napi = bootparams.createNAPIclient(config, log);
} catch (e) {
	console.error('NAPI client error: ' + e.message);
  process.exit(1);
}

try {
	cnapi = bootparams.createCNAPIclient(config, log);
} catch (e) {
	console.error('CNAPI client error: ' + e.message);
  process.exit(1);
}

var mac = process.argv[2];
if (!mac) {
  console.error('Error: must supply MAC address!');
  console.error('Usage: bootparams <MAC address>');
  process.exit(1);
}

bootparams.getBootParams(
	mac, napi, cnapi, log, function(err, res) {
		if (err) {
      log.error(err, 'getBootParams error');
			console.error('Error: ' + err.message);
      process.exit(1);
		}

    if (!res) {
			console.error('Error: no response');
      process.exit(1);
    }
    console.log(JSON.stringify(res, null, 2));
    process.exit(0);
});
