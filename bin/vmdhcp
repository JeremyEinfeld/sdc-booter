#!/usr/bin/env node
/*
 * Copyright (c) 2011 Joyent Inc., All rights reserved.
 *
 */

var sys = require('sys'),
    act = require('../lib/action');

var SOCK = '/tmp/vmdhcpd.sock';

function out()
{
    console.log.apply(this, arguments);
}

function usage()
{
    out("Usage:", process.argv[1], " <command> [options]\n");
    out("  Commands:\n");
    out("    start <interface> ... start the dhcp service on interface");
    out("    stop <interface> .... stop the dhcp service on interface");
    out("    list [-v] ........... list interfaces the service is running on");
    out("");
    process.exit(1);
}


function die(error)
{
    out('fatal:', error);
    process.exit(1);
}

function main()
{
    var uuid;
    var debug = false;

    if (process.argv.length < 3) {
        usage();
    }

    switch (process.argv[2]) {
    case 'start':
    case 'stop':
        var iface = process.argv[3];
        if (!iface) {
            console.log("Must supply interface for " + process.argv[2] + "!");
            usage();

        } else {
            act.sendAction(process.argv[2], { 'interface': iface },
                SOCK, function (err, result)
                {
                    if (err) {
                        die(err);
                    }
                    console.log(result.data);
                }
            );
        }
        break;
    case 'list':
        var verbose = false;
        if (process.argv[3] == '-v') {
          verbose = true;
        }
        act.sendAction(process.argv[2], { 'verbose': verbose },
                SOCK, function (err, result)
                {
                    if (err) {
                        die(err);
                    }
                    var ifaces = result.data;
                    for (var i in ifaces) {
                      out(ifaces[i].join("\t"));
                    }
                }
            );
        break;
    default:
        console.log("Invalid command '" + process.argv[2] + "'");
        usage();
        break;
    }
}

main();
